
/** Declaration file generated by dts-gen */
/*
    Generated for sharp v0.16.0

    To update for next version run the following:
    $ npm install -g dts-gen
    $ dts-gen -m sharp

    This will produce a new sharp.d.ts file.
*/

export = sharp;
declare class sharp {
    constructor(input: any, options: any);
    background(rgba: any): any;
    bandbool(boolOp: any): any;
    blur(sigma: any): any;
    boolean(operand: any, operator: any, options: any): any;
    clone(): any;
    compressionLevel(compressionLevel: any): any;
    convolve(kernel: any): any;
    crop(crop: any): any;
    embed(): any;
    extend(extend: any): any;
    extract(options: any): any;
    extractChannel(channel: any): any;
    flatten(flatten: any): any;
    flip(flip: any): any;
    flop(flop: any): any;
    gamma(gamma: any): any;
    grayscale(greyscale: any): any;
    greyscale(greyscale: any): any;
    ignoreAspectRatio(): any;
    joinChannel(images: any, options: any): any;
    jpeg(): any;
    limitInputPixels(limit: any): any;
    max(): any;
    metadata(callback: any): any;
    min(): any;
    negate(negate: any): any;
    normalise(normalize: any): any;
    normalize(normalize: any): any;
    optimiseScans(optimiseScans: any): any;
    optimizeScans(optimiseScans: any): any;
    overlayWith(overlay: any, options: any): any;
    overshootDeringing(overshootDeringing: any): any;
    png(): any;
    progressive(progressive: any): any;
    quality(quality: any): any;
    raw(): any;
    resize(width: any, height: any, options: any): any;
    rotate(angle: any): any;
    sequentialRead(sequentialRead: any): any;
    sharpen(sigma: any, flat: any, jagged: any): any;
    threshold(threshold: any, options: any): any;
    tile(tile: any): any;
    toBuffer(callback: any): any;
    toColorspace(colourspace: any): any;
    toColourspace(colourspace: any): any;
    toFile(fileOut: any, callback: any): any;
    toFormat(formatOut: any): any;
    trellisQuantisation(trellisQuantisation: any): any;
    trellisQuantization(trellisQuantisation: any): any;
    trim(tolerance: any): any;
    webp(): any;
    withMetadata(withMetadata: any): any;
    withoutAdaptiveFiltering(withoutAdaptiveFiltering: any): any;
    withoutChromaSubsampling(withoutChromaSubsampling: any): any;
    withoutEnlargement(withoutEnlargement: any): any;
    static bool: {
        and: string;
        eor: string;
        or: string;
    };
    static cache(options: any): any;
    static colorspace: {
        "b-w": string;
        bw: string;
        cmyk: string;
        multiband: string;
        srgb: string;
    };
    static colourspace: {
        "b-w": string;
        bw: string;
        cmyk: string;
        multiband: string;
        srgb: string;
    };
    static concurrency(concurrency: any): any;
    static counters(): any;
    static format: {
        dz: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        fits: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        gif: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        jpeg: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        magick: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        openslide: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        pdf: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        png: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        ppm: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        raw: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        svg: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        tiff: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        v: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
        webp: {
            id: string;
            input: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
            output: {
                buffer: boolean;
                file: boolean;
                stream: boolean;
            };
        };
    };
    static gravity: {
        center: number;
        centre: number;
        east: number;
        north: number;
        northeast: number;
        northwest: number;
        south: number;
        southeast: number;
        southwest: number;
        west: number;
    };
    static interpolator: {
        bicubic: string;
        bilinear: string;
        lbb: string;
        locallyBoundedBicubic: string;
        nearest: string;
        nohalo: string;
        vertexSplitQuadraticBasisSpline: string;
        vsqbs: string;
    };
    static kernel: {
        cubic: string;
        lanczos2: string;
        lanczos3: string;
    };
    static simd(simd: any): any;
    static strategy: {
        entropy: number;
    };
    static versions: {
        cairo: string;
        croco: string;
        exif: string;
        fontconfig: string;
        freetype: string;
        gdkpixbuf: string;
        gif: string;
        glib: string;
        gsf: string;
        harfbuzz: string;
        jpeg: string;
        lcms: string;
        orc: string;
        pango: string;
        pixman: string;
        png: string;
        svg: string;
        tiff: string;
        vips: string;
        webp: string;
        xml: string;
    };
}
declare namespace sharp {
    namespace queue {
        const domain: any;
        function addListener(type: any, listener: any): any;
        function emit(type: any, ...args: any[]): any;
        function eventNames(): any;
        function getMaxListeners(): any;
        function listenerCount(type: any): any;
        function listeners(type: any): any;
        function on(type: any, listener: any): any;
        function once(type: any, listener: any): any;
        function prependListener(type: any, listener: any): any;
        function prependOnceListener(type: any, listener: any): any;
        function removeAllListeners(type: any, ...args: any[]): any;
        function removeListener(type: any, listener: any): any;
        function setMaxListeners(n: any): any;
    }
}
